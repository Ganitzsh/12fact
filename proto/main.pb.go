// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	main.proto

It has these top-level messages:
	Image
	TransformedImage
	RotateImageRequest
	BlurImageRequest
	CropImageRequest
	NewTokenRequest
	DeleteTokenRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Image struct {
	Format string `protobuf:"bytes,1,opt,name=format" json:"format,omitempty"`
	Size   int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	File   []byte `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto1.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Image) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Image) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Image) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type TransformedImage struct {
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *TransformedImage) Reset()                    { *m = TransformedImage{} }
func (m *TransformedImage) String() string            { return proto1.CompactTextString(m) }
func (*TransformedImage) ProtoMessage()               {}
func (*TransformedImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransformedImage) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type RotateImageRequest struct {
	Angle int32  `protobuf:"varint,1,opt,name=angle" json:"angle,omitempty"`
	Image *Image `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *RotateImageRequest) Reset()                    { *m = RotateImageRequest{} }
func (m *RotateImageRequest) String() string            { return proto1.CompactTextString(m) }
func (*RotateImageRequest) ProtoMessage()               {}
func (*RotateImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RotateImageRequest) GetAngle() int32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

func (m *RotateImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type BlurImageRequest struct {
	Sigma float32 `protobuf:"fixed32,1,opt,name=sigma" json:"sigma,omitempty"`
	Image *Image  `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *BlurImageRequest) Reset()                    { *m = BlurImageRequest{} }
func (m *BlurImageRequest) String() string            { return proto1.CompactTextString(m) }
func (*BlurImageRequest) ProtoMessage()               {}
func (*BlurImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlurImageRequest) GetSigma() float32 {
	if m != nil {
		return m.Sigma
	}
	return 0
}

func (m *BlurImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type CropImageRequest struct {
	TopLeftX int32  `protobuf:"varint,1,opt,name=topLeftX" json:"topLeftX,omitempty"`
	TopLeftY int32  `protobuf:"varint,2,opt,name=topLeftY" json:"topLeftY,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Image    *Image `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
}

func (m *CropImageRequest) Reset()                    { *m = CropImageRequest{} }
func (m *CropImageRequest) String() string            { return proto1.CompactTextString(m) }
func (*CropImageRequest) ProtoMessage()               {}
func (*CropImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CropImageRequest) GetTopLeftX() int32 {
	if m != nil {
		return m.TopLeftX
	}
	return 0
}

func (m *CropImageRequest) GetTopLeftY() int32 {
	if m != nil {
		return m.TopLeftY
	}
	return 0
}

func (m *CropImageRequest) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *CropImageRequest) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CropImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type NewTokenRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *NewTokenRequest) Reset()                    { *m = NewTokenRequest{} }
func (m *NewTokenRequest) String() string            { return proto1.CompactTextString(m) }
func (*NewTokenRequest) ProtoMessage()               {}
func (*NewTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NewTokenRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type DeleteTokenRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *DeleteTokenRequest) Reset()                    { *m = DeleteTokenRequest{} }
func (m *DeleteTokenRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteTokenRequest) ProtoMessage()               {}
func (*DeleteTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteTokenRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func init() {
	proto1.RegisterType((*Image)(nil), "proto.Image")
	proto1.RegisterType((*TransformedImage)(nil), "proto.TransformedImage")
	proto1.RegisterType((*RotateImageRequest)(nil), "proto.RotateImageRequest")
	proto1.RegisterType((*BlurImageRequest)(nil), "proto.BlurImageRequest")
	proto1.RegisterType((*CropImageRequest)(nil), "proto.CropImageRequest")
	proto1.RegisterType((*NewTokenRequest)(nil), "proto.NewTokenRequest")
	proto1.RegisterType((*DeleteTokenRequest)(nil), "proto.DeleteTokenRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IMage service

type IMageClient interface {
	RotateImage(ctx context.Context, opts ...grpc.CallOption) (IMage_RotateImageClient, error)
	BlurImage(ctx context.Context, opts ...grpc.CallOption) (IMage_BlurImageClient, error)
	CropImage(ctx context.Context, opts ...grpc.CallOption) (IMage_CropImageClient, error)
}

type iMageClient struct {
	cc *grpc.ClientConn
}

func NewIMageClient(cc *grpc.ClientConn) IMageClient {
	return &iMageClient{cc}
}

func (c *iMageClient) RotateImage(ctx context.Context, opts ...grpc.CallOption) (IMage_RotateImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IMage_serviceDesc.Streams[0], c.cc, "/proto.IMage/RotateImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMageRotateImageClient{stream}
	return x, nil
}

type IMage_RotateImageClient interface {
	Send(*RotateImageRequest) error
	Recv() (*TransformedImage, error)
	grpc.ClientStream
}

type iMageRotateImageClient struct {
	grpc.ClientStream
}

func (x *iMageRotateImageClient) Send(m *RotateImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iMageRotateImageClient) Recv() (*TransformedImage, error) {
	m := new(TransformedImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iMageClient) BlurImage(ctx context.Context, opts ...grpc.CallOption) (IMage_BlurImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IMage_serviceDesc.Streams[1], c.cc, "/proto.IMage/BlurImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMageBlurImageClient{stream}
	return x, nil
}

type IMage_BlurImageClient interface {
	Send(*BlurImageRequest) error
	Recv() (*TransformedImage, error)
	grpc.ClientStream
}

type iMageBlurImageClient struct {
	grpc.ClientStream
}

func (x *iMageBlurImageClient) Send(m *BlurImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iMageBlurImageClient) Recv() (*TransformedImage, error) {
	m := new(TransformedImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iMageClient) CropImage(ctx context.Context, opts ...grpc.CallOption) (IMage_CropImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IMage_serviceDesc.Streams[2], c.cc, "/proto.IMage/CropImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMageCropImageClient{stream}
	return x, nil
}

type IMage_CropImageClient interface {
	Send(*CropImageRequest) error
	Recv() (*TransformedImage, error)
	grpc.ClientStream
}

type iMageCropImageClient struct {
	grpc.ClientStream
}

func (x *iMageCropImageClient) Send(m *CropImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iMageCropImageClient) Recv() (*TransformedImage, error) {
	m := new(TransformedImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for IMage service

type IMageServer interface {
	RotateImage(IMage_RotateImageServer) error
	BlurImage(IMage_BlurImageServer) error
	CropImage(IMage_CropImageServer) error
}

func RegisterIMageServer(s *grpc.Server, srv IMageServer) {
	s.RegisterService(&_IMage_serviceDesc, srv)
}

func _IMage_RotateImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IMageServer).RotateImage(&iMageRotateImageServer{stream})
}

type IMage_RotateImageServer interface {
	Send(*TransformedImage) error
	Recv() (*RotateImageRequest, error)
	grpc.ServerStream
}

type iMageRotateImageServer struct {
	grpc.ServerStream
}

func (x *iMageRotateImageServer) Send(m *TransformedImage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iMageRotateImageServer) Recv() (*RotateImageRequest, error) {
	m := new(RotateImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IMage_BlurImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IMageServer).BlurImage(&iMageBlurImageServer{stream})
}

type IMage_BlurImageServer interface {
	Send(*TransformedImage) error
	Recv() (*BlurImageRequest, error)
	grpc.ServerStream
}

type iMageBlurImageServer struct {
	grpc.ServerStream
}

func (x *iMageBlurImageServer) Send(m *TransformedImage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iMageBlurImageServer) Recv() (*BlurImageRequest, error) {
	m := new(BlurImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IMage_CropImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IMageServer).CropImage(&iMageCropImageServer{stream})
}

type IMage_CropImageServer interface {
	Send(*TransformedImage) error
	Recv() (*CropImageRequest, error)
	grpc.ServerStream
}

type iMageCropImageServer struct {
	grpc.ServerStream
}

func (x *iMageCropImageServer) Send(m *TransformedImage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iMageCropImageServer) Recv() (*CropImageRequest, error) {
	m := new(CropImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IMage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IMage",
	HandlerType: (*IMageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RotateImage",
			Handler:       _IMage_RotateImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BlurImage",
			Handler:       _IMage_BlurImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CropImage",
			Handler:       _IMage_CropImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}

func init() { proto1.RegisterFile("main.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xdf, 0x4e, 0xc2, 0x30,
	0x18, 0xc5, 0x53, 0xa0, 0x44, 0x3e, 0x48, 0x24, 0x8d, 0xd1, 0xc9, 0x15, 0xd9, 0x85, 0x2e, 0x5e,
	0x10, 0x83, 0x4f, 0xe0, 0xbf, 0x18, 0x12, 0xe4, 0xa2, 0xe1, 0x42, 0x2e, 0x4b, 0xf8, 0x18, 0x8d,
	0xdb, 0x8a, 0x5b, 0x09, 0x89, 0xcf, 0xe2, 0x63, 0xf9, 0x40, 0x66, 0x6d, 0x19, 0x73, 0x46, 0xf1,
	0x6a, 0x3d, 0xfd, 0x4e, 0xcf, 0x4e, 0xfb, 0x03, 0x88, 0x85, 0x4c, 0x06, 0xeb, 0x54, 0x69, 0xc5,
	0xa8, 0xf9, 0xf8, 0x4f, 0x40, 0x47, 0xb1, 0x08, 0x91, 0x9d, 0x42, 0x73, 0xa9, 0xd2, 0x58, 0x68,
	0x8f, 0xf4, 0x49, 0xd0, 0xe2, 0x4e, 0x31, 0x06, 0x8d, 0x4c, 0xbe, 0xa3, 0x57, 0xeb, 0x93, 0xa0,
	0xce, 0xcd, 0x3a, 0xdf, 0x5b, 0xca, 0x08, 0xbd, 0x7a, 0x9f, 0x04, 0x1d, 0x6e, 0xd6, 0xfe, 0x05,
	0x74, 0xa7, 0xa9, 0x48, 0xb2, 0xfc, 0x18, 0x2e, 0x6c, 0xe6, 0xce, 0x47, 0x4a, 0xbe, 0x09, 0x30,
	0xae, 0xb4, 0xd0, 0x68, 0x2c, 0x1c, 0xdf, 0x36, 0x98, 0x69, 0x76, 0x02, 0x54, 0x24, 0xa1, 0xb3,
	0x52, 0x6e, 0x05, 0xf3, 0x81, 0xca, 0xdc, 0x65, 0x7e, 0xde, 0x1e, 0x76, 0x6c, 0xf5, 0x81, 0x3d,
	0x69, 0x47, 0xfe, 0x18, 0xba, 0x77, 0xd1, 0x26, 0xad, 0xa6, 0x65, 0x32, 0x8c, 0x85, 0x49, 0xab,
	0x71, 0x2b, 0xfe, 0x95, 0xf6, 0x41, 0xa0, 0x7b, 0x9f, 0xaa, 0xf5, 0xb7, 0xb8, 0x1e, 0x1c, 0x69,
	0xb5, 0x1e, 0xe3, 0x52, 0xbf, 0xb8, 0x7e, 0x85, 0x2e, 0xcd, 0x66, 0x26, 0x77, 0x3f, 0x9b, 0xe5,
	0x35, 0xb6, 0x72, 0xa1, 0x57, 0xe6, 0x9d, 0x28, 0xb7, 0x22, 0x7f, 0xe8, 0x15, 0xca, 0x70, 0xa5,
	0xbd, 0x86, 0xd9, 0x76, 0x6a, 0x5f, 0x8f, 0xfe, 0x5e, 0xef, 0x12, 0x8e, 0x27, 0xb8, 0x9d, 0xaa,
	0x57, 0x4c, 0x4a, 0x77, 0x8d, 0xc4, 0x1c, 0x23, 0x87, 0xcd, 0x0a, 0xff, 0x0a, 0xd8, 0x03, 0x46,
	0xa8, 0xf1, 0xb0, 0x77, 0xf8, 0x49, 0x80, 0x8e, 0x9e, 0x73, 0x5e, 0x8f, 0xd0, 0x2e, 0xb1, 0x61,
	0xe7, 0xae, 0xc2, 0x4f, 0x5e, 0xbd, 0x33, 0x37, 0xaa, 0x22, 0x0f, 0xc8, 0x35, 0x61, 0xb7, 0xd0,
	0x2a, 0x90, 0xb0, 0x9d, 0xb3, 0x0a, 0xe9, 0x60, 0x44, 0x81, 0xa1, 0x88, 0xa8, 0x82, 0xf9, 0x33,
	0x62, 0xde, 0x34, 0xb3, 0x9b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x1f, 0xaf, 0x6a, 0xf5,
	0x02, 0x00, 0x00,
}
